name: 'generate-license-report'
author: 'Dafnik'
description: 'Generates a license report'
branding:
  icon: 'grid'
  color: 'purple'

inputs:
  custom-license-report-command:
    description: 'Indicates if the action should use the `license-report` command from `package.json` or not'
    required: false
    default: 'false'
  prettier:
    description: 'Indicates if the license report should be formatted with prettier'
    required: false
    default: 'true'
  package-json-path:
    description: 'package.json path'
    required: false
    default: 'package.json'
  license-report-path:
    description: 'file path'
    required: false
    default: 'licenses.json'
  output-format:
    description: 'output format'
    required: false
    default: 'json'

runs:
  using: 'composite'
  steps:
    - name: checking required dependencies
      shell: bash
      run: npm list | grep license-report || npm install -g license-report --no-shrinkwrap

    - name: checking required dependencies
      if: "${{ inputs.prettier == 'true' }}"
      shell: bash
      run: npm list | grep prettier || npm install -g prettier --no-shrinkwrap

    - name: generate new report
      if: "${{ inputs.custom-license-report-command == 'false' }}"
      shell: bash
      run: npm exec -- license-report --only=prod,peer --fields=name --fields=licenseType --fields=link --fields=installedVersion --fields=author --package=${{ inputs.package-json-path }} --output=${{ inputs.output-format }} > "${{ inputs.license-report-path }}.new"

    - name: generate new report (custom command)
      if: "${{ inputs.custom-license-report-command == 'true' }}"
      shell: bash
      run: npm run license-report > "${{ inputs.license-report-path }}.new"

    - name: format with prettier
      if: "${{ inputs.prettier == 'true' }}"
      shell: bash
      run: npm exec -- prettier --parser=json --write "${{ inputs.license-report-path }}.new"

    - uses: LouisBrunner/diff-action@v0.2.0
      name: check for differences
      id: diff-check # required for steps.diff-check to function
      continue-on-error: true
      with:
        old: ${{ inputs.license-report-path }}
        new: ${{ inputs.license-report-path }}.new
        mode: addition
        tolerance: same

    - name: gen delimiter
      id: gen-del
      shell: bash
      run: |
        echo "delimiter=$(openssl rand -hex 8)" >> "${GITHUB_OUTPUT}"
        echo "delimiter1=$(openssl rand -hex 8)" >> "${GITHUB_OUTPUT}"

    - name: output licenses
      shell: bash
      run: |
        echo "licenses<<${{ steps.gen-del.outputs.delimiter }}" >> "${GITHUB_OUTPUT}"
        echo "$(cat ${{ inputs.license-report-path }})" >> "${GITHUB_OUTPUT}"
        echo "${{ steps.gen-del.outputs.delimiter }}" >> "${GITHUB_OUTPUT}"

    - name: Move files in place
      if: steps.diff-check.outputs.passed == 'false'
      shell: bash
      run: mv -f ${{ inputs.license-report-path }}.new ${{ inputs.license-report-path }}

    - name: output diff
      if: steps.diff-check.outputs.passed == 'false'
      shell: bash
      run: |
        echo "diff<<${{ steps.gen-del.outputs.delimiter1 }}" >> "${GITHUB_OUTPUT}"
        echo "```${{ steps.diff-check.outputs.output }}```" >> "${GITHUB_OUTPUT}"
        echo "${{ steps.gen-del.outputs.delimiter1 }}" >> "${GITHUB_OUTPUT}"

    - name: output if passed
      if: steps.diff-check.outputs.passed == 'true'
      shell: bash
      run: echo "diff=" >> "$GITHUB_OUTPUT"
